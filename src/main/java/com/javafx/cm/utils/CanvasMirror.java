package com.javafx.cm.utils;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 * <p> Represents a Canvas Mirror class for creating Mirrored Image.</p>
 * @author l33t-c0d3r-66
 */
public class CanvasMirror
{
    public CanvasMirror()
    {

    }

    /**
     * <p>Create a new image that is mirrored of first one with extra
     * mirroring on all four sides as well as corners.</p>
     * @param imageUrl A String containing the url of Image to be mirrored.
     * @param sizeOfCanvas an integer representing the size of extra mirroring we want.
     */
    public String canvasMirrorEffect(String imageUrl, int sizeOfCanvas)
    {
        File imageFile = new File(imageUrl);
        boolean originalMirrored = mirrorOriginal(imageFile);
        if(originalMirrored) {
            // If original Image is mirrored then Mirror Sides
            boolean sidesTransformed = mirrorSides(getOutputDirectory()+imageFile.getName(),sizeOfCanvas);
            if(sidesTransformed) {
                return getOutputDirectory()+imageFile.getName();
            }
        }
        // Delete the output file if unsuccessful
        try {
            Files.deleteIfExists(Paths.get(getOutputDirectory()+imageFile.getName()));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;

    }
    /**
     * <p>Create an Image which is mirror of Original Image. In other words, it will flip original image horizontally.</p>
     * @param file a file object representing the image we want to mirror.
     * @return a boolean value true iff original image is flipped vertically successfully otherwise false
     */
    private boolean mirrorOriginal(File file) {
        try {
            FileInputStream fileInputStream = new FileInputStream(file);
            BufferedImage bufferedImage = ImageIO.read(fileInputStream);
            AffineTransform tx = AffineTransform.getScaleInstance(-1, 1);
            tx.translate(-bufferedImage.getWidth(null), 0);
            AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
            bufferedImage = op.filter(bufferedImage, null);
            ImageIO.write(bufferedImage, "png", new File(getOutputDirectory()+file.getName()));
            return true;
        } catch(Exception e) {
            System.out.println(e);
        }
        return false;
    }

    /**
     * <p>Create an Image which uses the image generated by mirrorOriginal method, create a
     * new image which have extra mirroring from all 4 sides without corner filled and saves it.</p>
     * @param imageUrl a string representing the path of image generated by mirrorOriginal method.
     * @param sizeOfCanvas an integer that represent the extra mirroring for each side of image.
     * @return a boolean value of true iff all 4 sides are mirrored successfully. otherwise, return false
     * @see #mirrorOriginal(File)
     */
    private boolean mirrorSides(String imageUrl, int sizeOfCanvas) {
        try {
            int pixel = 0;
            //File object for Mirror of Original Image
            File imageFile = new File(imageUrl);
            //Buffered Image to read mirrored of orignial Image
            BufferedImage sourceImage = ImageIO.read(imageFile);
            // Get Dimensions (Width and Height) of Image
            int width = sourceImage.getWidth();
            int height = sourceImage.getHeight();
            // BufferedImage for Storing Mirrored Image with Sides appended
            BufferedImage mirroredImage = new BufferedImage(width + (sizeOfCanvas * 2), // For Left and Right
                    height + (sizeOfCanvas * 2),  //For Top and Bottom
                    BufferedImage.TYPE_INT_ARGB);

            // Printing Original Image with new Size
            for(int i=0;i<width;i++) {
                for(int j=0;j<height;j++) {
                    pixel = sourceImage.getRGB(i,j);
                    mirroredImage.setRGB(i+sizeOfCanvas,j+sizeOfCanvas,pixel);
                }
            }
            // Adding Top Side to Image after Creating Mirror
            for (int i = 0; i < width; i++) {
                for (int j = 0, l = sizeOfCanvas; j < sizeOfCanvas; j++, l--) {
                    pixel = sourceImage.getRGB(i, l);
                    mirroredImage.setRGB(i + sizeOfCanvas, j, pixel);
                }
            }
            // Adding Bottom Side to Image after Creating Mirror
            for (int i = 0; i < width; i++) {
                for (int j = height - 1, l = height - sizeOfCanvas; j > height - sizeOfCanvas - 1; j--, l++) {
                    pixel = sourceImage.getRGB(i, l);
                    mirroredImage.setRGB(i + sizeOfCanvas, j + sizeOfCanvas * 2, pixel);
                }
            }
            // Adding Left Side to Image after Creating Mirror
            for (int i = sizeOfCanvas,k=0; i > 0; i--,k++) {
                for (int j = 0; j < height; j++) {
                    pixel = sourceImage.getRGB(i, j);
                    mirroredImage.setRGB(k, j+sizeOfCanvas, pixel);
                }
            }
            // Adding Right Side to Image after Creating Mirror
            for (int i = width - sizeOfCanvas,k=width-1; i < width; i++,k--) {
                for (int j = 0; j < height; j++) {
                    pixel = sourceImage.getRGB(k, j);
                    mirroredImage.setRGB(i + sizeOfCanvas * 2, j + sizeOfCanvas, pixel);
                }
            }
            // Saving New Image with Center and all Sides Mirrored and Appended.
            imageFile = new File(getOutputDirectory()+imageFile.getName());
            ImageIO.write(mirroredImage, "png", imageFile);
            //Calling mirrorEdges method to fill corners.
            return mirrorEdges(imageFile.getAbsolutePath(),sizeOfCanvas);
        } catch(Exception e) {
            System.out.println(e);
        }
        return false;
    }

    /**
     * <p>Create an new Image which uses the image generated by mirrorSides method
     * fill the corners of new image and save it.</p>
     * @param imageUrl a string representing the path of image generated by mirrorSides method.
     * @param  sizeOfCanvas an integer that represent the extra mirroring for each side of image.
     * @return a boolean value of true if all edges are filled successfully. otherwise, false.
     * @see #mirrorSides(String, int) 
     */
    private boolean mirrorEdges(String imageUrl, int sizeOfCanvas) {
        try {
            int pixel = 0;
            //BufferedImage for source image
            File imageFile = new File(imageUrl);
            BufferedImage sourceImage = ImageIO.read(imageFile);
            //get source image dimension
            int width = sourceImage.getWidth();
            int height = sourceImage.getHeight();
            //BufferedImage for mirror image
            BufferedImage mirroredImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            // Printing the Mirrored Image from sourceImage to mirroredImage
            for(int i=0;i<width;i++) {
                for(int j=0;j<height;j++) {
                    pixel = sourceImage.getRGB(i,j);
                    mirroredImage.setRGB(i,j,pixel);
                }
            }

            //Filling Top Right corner
            for(int i=sizeOfCanvas*2,k=0;i>sizeOfCanvas;i--,k++) {
                for(int j=sizeOfCanvas,l=sizeOfCanvas;j<=i;j++,l--) {
                    pixel = sourceImage.getRGB(j, i);
                    mirroredImage.setRGB( l, k, pixel);
                }
            }
            for(int i=sizeOfCanvas,k=sizeOfCanvas;i<sizeOfCanvas*2;i++,k--) {
                for(int j=sizeOfCanvas*2,l=0;j>i;j--,l++) {
                    pixel = sourceImage.getRGB(j,i);
                    mirroredImage.setRGB(l,k,pixel);
                }
            }
            // Filling Bottom Left Corner
            for(int i=sizeOfCanvas,k=height-sizeOfCanvas-1,m=height-sizeOfCanvas-1;i>=0;i--,k--,m++) {
                for(int j=0,l=height-sizeOfCanvas-1;j<=i;j++,l++) {
                    pixel = sourceImage.getRGB(j, k);
                    mirroredImage.setRGB(j , m, pixel);
                }
            }
            for(int i=height-sizeOfCanvas-1,k=sizeOfCanvas;i<height;i++,k--) {
                for(int j=sizeOfCanvas,l=sizeOfCanvas;j>k;j--,l++) {
                    pixel = sourceImage.getRGB(l, i);
                    mirroredImage.setRGB(j , i, pixel);
                }
            }
            // Filling Top Right Side
            for(int i=0;i<sizeOfCanvas;i++) {
                for(int j=sizeOfCanvas,l=width-sizeOfCanvas-1;j>i;j--,l--) {
                    pixel = sourceImage.getRGB(l, i);
                    mirroredImage.setRGB(width-j , i, pixel);
                }
            }
            for(int i=sizeOfCanvas*2,k=width-sizeOfCanvas-1,m=0;i>sizeOfCanvas;i--,k--,m++) {
                for(int j=width-1;j>k;j--) {
                    pixel = sourceImage.getRGB(j, i);
                    mirroredImage.setRGB(j , m, pixel);
                }
            }
            // Filling Bottom Right Side
            for(int i=sizeOfCanvas,k=height-sizeOfCanvas-1,m=height-sizeOfCanvas-1;i>=0;i--,k--,m++) {
                for(int j=0,l=width-1;j<=i;j++,l--) {
                    pixel = sourceImage.getRGB(l, k);
                    mirroredImage.setRGB(l , m, pixel);
                }
            }
            for(int i=height-sizeOfCanvas-1,k=0;i<height;i++,k++) {
                for(int j=0,l=width-sizeOfCanvas-1;j<k;j++,l--) {
                    pixel = sourceImage.getRGB(l, i);
                    mirroredImage.setRGB(width-sizeOfCanvas+j-1, i, pixel);
                }
            }
            // Save Mirrored Image
            imageFile = new File(getOutputDirectory()+imageFile.getName());
            ImageIO.write(mirroredImage, "png", imageFile);
            return true;
        }catch(Exception e) {
            System.out.println(e);
        }
        return false;
    }

    /**
     * <p>Checks the Operating system and create a directory to store output Images in App Data or Home</p>
     * @return a string that contain path to internal directory.
     */
    private String getOutputDirectory() {
        String workingDirectory;
        //Getting name of operating system using system property
        String operatingSystemName = (System.getProperty("os.name")).toUpperCase();
        //Checking if operating system is windows or not
        if (operatingSystemName.contains("WIN")) {
            workingDirectory = System.getenv("AppData");
            workingDirectory+= "\\mirror\\";
        } else {
            workingDirectory = System.getProperty("user.home");
            workingDirectory += "\\mirror\\";
        }
        File file = new File(workingDirectory);
        //Creating the directory for the first time
        boolean isDirectoryCreated = file.mkdir();
        if(isDirectoryCreated)
            System.out.println("Directory Created!");
        return workingDirectory;
    }
}





